>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# simple tests
>>> matrix_divided([[6]], 3)
[[2.0]]

>>> matrix_divided([[2, 4, 6]], 2)
[[1.0, 2.0, 3.0]]

>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

>>> matrix_divided([[1], [2], [3], [4], [5]], 1)
[[1.0], [2.0], [3.0], [4.0], [5.0]]

>>> matrix_divided([[0, 1], [0, 1]], 5)
[[0.0, 0.2], [0.0, 0.2]]

>>> matrix_divided([[0]], 2)
[[0.0]]

>>> matrix_divided([[0], [0]], 3)
[[0.0], [0.0]]

>>> matrix_divided([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1)
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

>>> matrix_divided([[0, 1, 210030400]], 10)
[[0.0, 0.1, 21003040.0]]

>>> matrix_divided([[0.22222, 88.9999999, 0], [0.0000244, 0.9, 0.99999]], 2)
[[0.11, 44.5, 0.0], [0.0, 0.45, 0.5]]

>>> matrix_divided([[0], [5], [0.111]], 1.0)
[[0.0], [5.0], [0.11]]

>>> matrix_divided([[234.88, 98], [155, 0.59]], 2.5)
[[93.95, 39.2], [62.0, 0.24]]

>>> matrix_divided([[0, 0.0, 1, 2.0, 10],
... [10.9, 0.11, 11, 10, 10000000.23]], 0.1)
[[0.0, 0.0, 10.0, 20.0, 100.0], [109.0, 1.1, 110.0, 100.0, 100000002.3]]


## type erro checks for list of lists
# list check
>>> matrix_divided(5, 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided('3', 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(['1'], 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([['1']], 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[1, 2, 2.0], [3, '4', 5]], 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[1, 2, 1 + 2j], [1, 2, 3]], 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# empty check
>>> matrix_divided([], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[]], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[], []], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# matrix type must be verified before length
>>> matrix_divided([[1], []], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# tuples
>>> matrix_divided((), 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided((1, 2), 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided(((1, 2), (3, 4)), 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided(([1, 2], [3, 4]), 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# sets
>>> matrix_divided(set(), 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided({1, 2}, 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([{1, 2}, {3, 4}], 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats


# dicts
>>> matrix_divided(dict(), 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided({1: 1, 2: 2}, 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([{1: 1, 2: 2}, {3: 3, 4: 4}], 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([{1, 2}, {3, 4}], 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats


## size check
>>> matrix_divided([[1, 1], [3]], 5)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size
>>> matrix_divided([[1], [1, 3]], 5)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size
>>> matrix_divided([[1, 2, 3.0], [4, 56], [7, 8.0, 9]], 5)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size
>>> matrix_divided([[1], [1], [1], [1], [2, 3]], 5)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size


## div type check

>>> matrix_divided([[8]], 4.9999)
[[1.6]]
>>> matrix_divided([[8]], '4')
Traceback (most recent call last):
TypeError: div must be a number
>>> matrix_divided([[8]], '2.5')
Traceback (most recent call last):
TypeError: div must be a number
>>> matrix_divided([[8]], 4 + 0j)
Traceback (most recent call last):
TypeError: div must be a number
>>> matrix_divided([[8]], 2 + 5j)
Traceback (most recent call last):
TypeError: div must be a number
>>> matrix_divided([[8]], int)
Traceback (most recent call last):
TypeError: div must be a number
>>> matrix_divided([[8]], float)
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix_divided([[8]], 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero
>>> matrix_divided([[8]], 0.0)
Traceback (most recent call last):
ZeroDivisionError: division by zero
>>> matrix_divided([[0]], 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero
>>> matrix_divided([[0]], 0.0)
Traceback (most recent call last):
ZeroDivisionError: division by zero


## precision checks
>>> matrix_divided([[8]], 4.5)
[[1.78]]
>>> matrix_divided([[1.123456789]], 1)
[[1.12]]
>>> matrix_divided([[8]], 1.001)
[[7.99]]
>>> matrix_divided([[8]], 1.0009)
[[7.99]]
>>> matrix_divided([[8]], 1.0005)
[[8.0]]

## new object check
>>> a = [[8]]
>>> b = matrix_divided(a, 2)
>>> b == [[4]] and b is not a
True
>>> a = [[1]]
>>> b = matrix_divided(a, 1)
>>> b == [[1]] and b is not a
True
>>> a = [8]
>>> b = matrix_divided([a], 2)
>>> b == [[4]] and b[0] is not a
True
>>> a = [1]
>>> b = matrix_divided([a], 1)
>>> b == [[1]] and b[0] is not a
True

# precedence
>>> matrix_divided([[5, 6], [int]], '5.9')
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[5, '3'], [5]], 0)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[5, '3'], [5]], 0)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[5, 3], (5)], 0)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([{5, 3}, [5]], 0)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[0, 3 + 0j], [5]], 0)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[5], []], int)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[], []], None)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[]], '1')
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[]], 0)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2], [3]], '5')
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size
>>> matrix_divided([[1], [2, 3]], '0')
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size
>>> matrix_divided([[1, 2], [3]], 0)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([[1, 2], [3, 5]], '0')
Traceback (most recent call last):
TypeError: div must be a number
>>> matrix_divided([[1, 2], [3, 5]], 0 + 0j)
Traceback (most recent call last):
TypeError: div must be a number

# missing arguments
>>> matrix_divided()
Traceback (most recent call last):
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

>>> matrix_divided([[1]])
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'matrix'

